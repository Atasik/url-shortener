// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	domain "link-shortener/internal/domain"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockLinkRepo is a mock of LinkRepo interface.
type MockLinkRepo struct {
	ctrl     *gomock.Controller
	recorder *MockLinkRepoMockRecorder
}

// MockLinkRepoMockRecorder is the mock recorder for MockLinkRepo.
type MockLinkRepoMockRecorder struct {
	mock *MockLinkRepo
}

// NewMockLinkRepo creates a new mock instance.
func NewMockLinkRepo(ctrl *gomock.Controller) *MockLinkRepo {
	mock := &MockLinkRepo{ctrl: ctrl}
	mock.recorder = &MockLinkRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLinkRepo) EXPECT() *MockLinkRepoMockRecorder {
	return m.recorder
}

// AddOriginalURL mocks base method.
func (m *MockLinkRepo) AddOriginalURL(link domain.Link) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOriginalURL", link)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddOriginalURL indicates an expected call of AddOriginalURL.
func (mr *MockLinkRepoMockRecorder) AddOriginalURL(link interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOriginalURL", reflect.TypeOf((*MockLinkRepo)(nil).AddOriginalURL), link)
}

// GetOrginalURL mocks base method.
func (m *MockLinkRepo) GetOrginalURL(link domain.Link) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrginalURL", link)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrginalURL indicates an expected call of GetOrginalURL.
func (mr *MockLinkRepoMockRecorder) GetOrginalURL(link interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrginalURL", reflect.TypeOf((*MockLinkRepo)(nil).GetOrginalURL), link)
}
