// Code generated by MockGen. DO NOT EDIT.
// Source: encoder.go

// Package mock_encoder is a generated GoMock package.
package mock_encoder

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockEncoder is a mock of Encoder interface.
type MockEncoder struct {
	ctrl     *gomock.Controller
	recorder *MockEncoderMockRecorder
}

// MockEncoderMockRecorder is the mock recorder for MockEncoder.
type MockEncoderMockRecorder struct {
	mock *MockEncoder
}

// NewMockEncoder creates a new mock instance.
func NewMockEncoder(ctrl *gomock.Controller) *MockEncoder {
	mock := &MockEncoder{ctrl: ctrl}
	mock.recorder = &MockEncoderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEncoder) EXPECT() *MockEncoderMockRecorder {
	return m.recorder
}

// Decode mocks base method.
func (m *MockEncoder) Decode(token string) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decode", token)
	ret0, _ := ret[0].(int64)
	return ret0
}

// Decode indicates an expected call of Decode.
func (mr *MockEncoderMockRecorder) Decode(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockEncoder)(nil).Decode), token)
}

// Encode mocks base method.
func (m *MockEncoder) Encode(n int64) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encode", n)
	ret0, _ := ret[0].(string)
	return ret0
}

// Encode indicates an expected call of Encode.
func (mr *MockEncoderMockRecorder) Encode(n interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encode", reflect.TypeOf((*MockEncoder)(nil).Encode), n)
}
